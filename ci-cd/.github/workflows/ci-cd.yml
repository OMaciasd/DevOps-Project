name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: 🏗️ Build & Push Image
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 🏗️ Build & Push Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:latest .
          docker push ghcr.io/${{ github.repository }}:latest

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔬 Run Unit Tests
        run: |
          docker run --rm ghcr.io/${{ github.repository }}:latest pytest

      - name: 🏗️ Run Integration Tests
        run: |
          docker run --rm ghcr.io/${{ github.repository }}:latest pytest -m integration

  security_scan:
    name: 🔍 Security & Code Quality
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'

      - name: 🔎 Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -Dsonar.organization=my-org -Dsonar.projectKey=my-project -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN

  deploy:
    name: 🚀 Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [test, security_scan]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: 🚀 Deploy to Kubernetes
        run: kubectl apply -f k8s/deployment.yaml
